// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

/// Enums
enum LeaseStatus {
  PENDING
  ACTIVE
  RENEWALPENDING
  ENDED
}

enum ContactRole {
  PRIMARY_TENANT
  TENANT
  COSIGNER
}

enum StaffRole {
  PROPERTY_MANAGER
  ASSISTANT_MANAGER
  MAINTENANCE_COORDINATOR
  ACCOUNTING
  ADMIN
}

/// Models
model Property {
  id               BigInt   @id @default(autoincrement())
  name             String
  addressLine1     String?
  addressLine2     String?
  city             String?
  state            String?
  postalCode       String?
  numberUnits      Int?      @default(0)
  isActive         Boolean   @default(true)
  createdAt        DateTime  @default(now())
  updatedAt        DateTime  @updatedAt

  units            Unit[]
  leases           Lease[]
  propertyOwners   PropertyOwner[]
  propertyStaff    PropertyStaff[]

  @@index([name])
}

model Unit {
  id          BigInt   @id @default(autoincrement())
  propertyId  BigInt
  unitNumber  String
  bedrooms    Decimal? @db.Decimal(3,1)
  bathrooms   Decimal? @db.Decimal(3,1)
  sqft        Int?
  marketRent  Decimal? @db.Decimal(12,2)
  isOccupied  Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  property    Property @relation(fields: [propertyId], references: [id], onDelete: Cascade)
  leases      Lease[]

  @@unique([propertyId, unitNumber])
  @@index([propertyId])
}

model Owner {
  id          BigInt   @id @default(autoincrement())
  isCompany   Boolean  @default(false)
  firstName   String?
  lastName    String?
  companyName String?
  email       String?
  phone       String?
  isActive    Boolean   @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  propertyOwners PropertyOwner[]

  @@index([lastName, firstName])
}

model Lease {
  id          BigInt      @id @default(autoincrement())
  propertyId  BigInt
  unitId      BigInt
  startDate   DateTime
  endDate     DateTime?
  status      LeaseStatus @default(ACTIVE)
  depositAmt  Decimal?    @db.Decimal(12,2)
  notes       String?
  createdAt   DateTime    @default(now())
  updatedAt   DateTime @updatedAt

  property    Property    @relation(fields: [propertyId], references: [id], onDelete: Restrict)
  unit        Unit        @relation(fields: [unitId], references: [id], onDelete: Restrict)
  contacts    LeaseContact[]

  @@index([propertyId])
  @@index([unitId, status])
}

model LeaseContact {
  id                BigInt      @id @default(autoincrement())
  leaseId           BigInt
  role              ContactRole
  fullName          String
  email             String?
  phone             String?
  dateOfBirth       DateTime?
  isRentResponsible Boolean     @default(false)
  createdAt         DateTime    @default(now())
  updatedAt         DateTime    @updatedAt

  lease             Lease       @relation(fields: [leaseId], references: [id], onDelete: Cascade)

  @@index([leaseId, role])
}

model Staff {
  id         BigInt   @id @default(autoincrement())
  firstName  String
  lastName   String
  email      String?
  phone      String?
  role       StaffRole @default(PROPERTY_MANAGER)
  isActive   Boolean   @default(true)
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt

  propertyStaff PropertyStaff[]

  @@index([lastName, firstName])
}

model PropertyOwner {
  id                  BigInt   @id @default(autoincrement())
  propertyId          BigInt
  ownerId             BigInt
  ownershipPercent    Decimal  @db.Decimal(5,2) // 0.00 - 100.00
  disbursementPercent Decimal  @db.Decimal(5,2) // 0.00 - 100.00
  effectiveStart      DateTime @default(now())
  effectiveEnd        DateTime?
  notes               String?

  property            Property @relation(fields: [propertyId], references: [id], onDelete: Cascade)
  owner               Owner    @relation(fields: [ownerId], references: [id], onDelete: Cascade)

  @@unique([propertyId, ownerId, effectiveStart])
  @@index([propertyId])
  @@index([ownerId])
}

model PropertyStaff {
  id         BigInt   @id @default(autoincrement())
  propertyId BigInt
  staffId    BigInt
  role       StaffRole @default(PROPERTY_MANAGER)
  assignedAt DateTime  @default(now())

  property   Property  @relation(fields: [propertyId], references: [id], onDelete: Cascade)
  staff      Staff     @relation(fields: [staffId], references: [id], onDelete: Cascade)

  @@unique([propertyId, staffId, role])
  @@index([propertyId])
  @@index([staffId])
}

// NextAuth.js models
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
